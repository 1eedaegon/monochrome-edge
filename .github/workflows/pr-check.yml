name: PR Check
on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-commit-message:
    name: Check Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          # Get all commits in this PR
          COMMITS=$(git log origin/${{ github.base_ref }}..HEAD --format=%s)

          # Conventional commit regex
          PATTERN="^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .+"
          BREAKING_PATTERN="^(feat|fix)!:"

          INVALID_COMMITS=""
          VERSION_IMPACT="patch"

          while IFS= read -r commit; do
            if [[ ! "$commit" =~ $PATTERN ]] && [[ ! "$commit" =~ $BREAKING_PATTERN ]]; then
              INVALID_COMMITS="${INVALID_COMMITS}\n  ‚ùå ${commit}"
            fi

            # Determine version impact
            if [[ "$commit" =~ $BREAKING_PATTERN ]] || [[ "$commit" =~ "BREAKING CHANGE:" ]]; then
              VERSION_IMPACT="major"
            elif [[ "$commit" =~ ^feat ]] && [ "$VERSION_IMPACT" != "major" ]; then
              VERSION_IMPACT="minor"
            fi
          done <<< "$COMMITS"

          if [ -n "$INVALID_COMMITS" ]; then
            echo "‚ùå Invalid commit messages found:"
            echo -e "$INVALID_COMMITS"
            echo ""
            echo "üìù Conventional Commits format:"
            echo "  <type>(<scope>): <subject>"
            echo ""
            echo "Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, revert"
            echo ""
            echo "Examples:"
            echo "  feat: add dark mode toggle"
            echo "  fix(button): correct hover state"
            echo "  feat!: breaking change in API"
            exit 1
          fi

          echo "‚úÖ All commits follow Conventional Commits format"
          echo "üì¶ Version impact: ${VERSION_IMPACT}"

      - name: Add version label
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            let versionImpact = 'patch';
            for (const commit of commits.data) {
              const message = commit.commit.message;
              if (message.match(/^(feat|fix)!:/) || message.includes('BREAKING CHANGE:')) {
                versionImpact = 'major';
                break;
              } else if (message.match(/^feat/)) {
                versionImpact = 'minor';
              }
            }

            // Remove existing version labels
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            for (const label of labels.data) {
              if (['patch', 'minor', 'major'].includes(label.name)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name
                });
              }
            }

            // Add new version label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [versionImpact]
            });

            // Add comment
            const body = `### üì¶ Version Impact: \`${versionImpact}\`

            This PR will trigger a **${versionImpact}** version bump when merged.

            Current commit types detected:
            ${commits.data.map(c => `- \`${c.commit.message.split('\n')[0]}\``).join('\n')}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

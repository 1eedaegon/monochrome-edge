name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  bump-version:
    runs-on: ubuntu-latest
    
    # Prevent concurrent version bumps
    concurrency:
      group: version-bump
      cancel-in-progress: false
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Bump version
      id: bump_version
      run: |
        # Pull latest to avoid conflicts
        git pull --rebase origin main
        
        # Bump version without creating git tag yet
        npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
        
        # Get new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Update version in files
      run: |
        npm run version:update
    
    - name: Generate changelog
      run: |
        npm run changelog
    
    - name: Commit version bump
      run: |
        git add .
        git commit -m "chore(release): v${{ steps.bump_version.outputs.new_version }}"
    
    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
        
        # Push with lease to prevent overwriting
        git push --atomic origin main "v${{ steps.bump_version.outputs.new_version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}
        release_name: Release v${{ steps.bump_version.outputs.new_version }}
        body: |
          ## Version ${{ steps.bump_version.outputs.new_version }}
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: ${{ github.event.inputs.version_type == 'prerelease' }}
    
    - name: Publish to npm (if not prerelease)
      if: github.event.inputs.version_type != 'prerelease'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
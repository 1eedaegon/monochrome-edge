name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Analyze commits and determine version
        id: version
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          # Split version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Analyze commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --format=%s)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --format=%s)
          fi

          # Determine version bump
          BUMP="patch"
          while IFS= read -r commit; do
            if [[ "$commit" =~ ^(feat!|fix!|BREAKING CHANGE) ]] || [[ "$commit" =~ "BREAKING CHANGE:" ]]; then
              BUMP="major"
              break
            elif [[ "$commit" =~ ^feat ]]; then
              if [ "$BUMP" != "major" ]; then
                BUMP="minor"
              fi
            fi
          done <<< "$COMMITS"

          # Calculate new version
          case $BUMP in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac

          echo "Current version: $CURRENT_VERSION"
          echo "Bump type: $BUMP"
          echo "New version: $NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          echo "# Changelog for v${NEW_VERSION}" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md

          if [ -z "$LATEST_TAG" ]; then
            git log --format="- %s (%h)" >> CHANGELOG_TEMP.md
          else
            git log ${LATEST_TAG}..HEAD --format="- %s (%h)" >> CHANGELOG_TEMP.md
          fi

          # Categorize changes
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          if grep -q "^feat" CHANGELOG_TEMP.md; then
            echo "### ✨ Features" >> CHANGELOG.md
            grep "^- feat" CHANGELOG_TEMP.md | sed 's/^- feat:/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if grep -q "^fix" CHANGELOG_TEMP.md; then
            echo "### 🐛 Bug Fixes" >> CHANGELOG.md
            grep "^- fix" CHANGELOG_TEMP.md | sed 's/^- fix:/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if grep -q "^docs" CHANGELOG_TEMP.md; then
            echo "### 📚 Documentation" >> CHANGELOG.md
            grep "^- docs" CHANGELOG_TEMP.md | sed 's/^- docs:/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          if grep -q "^chore" CHANGELOG_TEMP.md; then
            echo "### 🔧 Chores" >> CHANGELOG.md
            grep "^- chore" CHANGELOG_TEMP.md | sed 's/^- chore:/- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Set multiline output
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Update package.json version
        id: update_version
        run: |
          CURRENT_PKG_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_TAG_VERSION=${LATEST_TAG#v}

          echo "Current package.json version: $CURRENT_PKG_VERSION"
          echo "Latest git tag version: $LATEST_TAG_VERSION"
          echo "Calculated new version: $NEW_VERSION"

          # Check if there are any new commits since the last tag
          if [ "$LATEST_TAG" != "v0.0.0" ]; then
            NEW_COMMITS=$(git rev-list ${LATEST_TAG}..HEAD --count)
          else
            NEW_COMMITS=$(git rev-list HEAD --count)
          fi

          echo "New commits since last tag: $NEW_COMMITS"

          # Skip release only if no new commits AND versions match
          if [ "$NEW_COMMITS" -eq 0 ]; then
            echo "No new commits since last tag - skipping release"
            echo "skip_release=true" >> $GITHUB_OUTPUT
          # If package.json version is higher than tag, create release with package.json version
          elif [[ "$CURRENT_PKG_VERSION" > "$LATEST_TAG_VERSION" ]]; then
            echo "package.json version ($CURRENT_PKG_VERSION) is higher than tag - creating release"
            FINAL_VERSION="$CURRENT_PKG_VERSION"
            echo "skip_release=false" >> $GITHUB_OUTPUT
            echo "version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          # If calculated version is higher, update package.json
          elif [[ "$NEW_VERSION" > "$CURRENT_PKG_VERSION" ]]; then
            echo "Updating package.json to $NEW_VERSION"
            npm version $NEW_VERSION --no-git-tag-version
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add package.json package-lock.json
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            echo "skip_release=false" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # If versions match but there are new commits, use the calculated version
          else
            echo "Versions match but new commits exist - using calculated version $NEW_VERSION"
            echo "skip_release=false" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.update_version.outputs.skip_release != 'true'
        run: npm run build

      - name: Create and push tag
        if: steps.update_version.outputs.skip_release != 'true'
        run: |
          VERSION=${{ steps.update_version.outputs.version || steps.version.outputs.new_version }}

          # Check if tag already exists
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists locally, deleting..."
            git tag -d "v${VERSION}"
          fi

          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}"; then
            echo "Tag v${VERSION} exists on remote, deleting..."
            git push origin ":refs/tags/v${VERSION}"
          fi

          # Create new tag
          git tag "v${VERSION}"
          git push origin main --tags

      - name: Create GitHub Release
        if: steps.update_version.outputs.skip_release != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.update_version.outputs.version || steps.version.outputs.new_version }}
          release_name: Release v${{ steps.update_version.outputs.version || steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Publish to npm
        if: steps.update_version.outputs.skip_release != 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      - name: Setup Node for GitHub Packages
        if: steps.update_version.outputs.skip_release != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://npm.pkg.github.com"
          scope: "@1eedaegon"

      - name: Publish to GitHub Packages
        if: steps.update_version.outputs.skip_release != 'true'
        run: |
          # Temporarily modify package.json for GitHub Packages
          npm pkg set name="@1eedaegon/monochrome-edge"

          # Publish to GitHub Packages
          npm publish --access public

          # Restore original name
          npm pkg set name="@monochrome-edge/ui"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Purge jsDelivr cache
        if: steps.update_version.outputs.skip_release != 'true' && success()
        run: |
          # Wait for npm to propagate (increased to 60s for better CDN propagation)
          sleep 60

          VERSION="${{ steps.update_version.outputs.version || steps.version.outputs.new_version }}"

          # Purge all critical files for the new version
          echo "Purging jsDelivr cache for version $VERSION..."
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@${VERSION}/dist/monochrome.min.css" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@${VERSION}/dist/warm-theme.min.css" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@${VERSION}/dist/cold-theme.min.css" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@${VERSION}/dist/index.esm.js" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@${VERSION}/dist/index.js" || true

          # Purge latest tag for all files
          echo "Purging jsDelivr cache for @latest..."
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@latest/dist/monochrome.min.css" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@latest/dist/warm-theme.min.css" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@latest/dist/cold-theme.min.css" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@latest/dist/index.esm.js" || true
          curl "https://purge.jsdelivr.net/npm/@monochrome-edge/ui@latest/dist/index.js" || true

          echo "jsDelivr cache purge completed"
        continue-on-error: true

      - name: Comment on PR (if triggered by PR merge)
        if: github.event.pull_request
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.update_version.outputs.version || steps.version.outputs.new_version }}';
            const bump = '${{ steps.version.outputs.bump_type }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Released in v${version} (${bump} version bump)`
            });
